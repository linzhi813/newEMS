/******************************************************************************
 *
 *  ASAP2 file:     ASW.a2l
 *
 * Code generation for model "ASW".
 *
 * Model version              : 6.4
 * Simulink Coder version : 9.4 (R2020b) 29-Jul-2020
 * C source code generated on : Mon Feb  1 14:32:51 2021
 * 
 * Target selection: ert.tlc
 * Embedded hardware selection: ARM Compatible->ARM Cortex
 * Code generation objectives: Unspecified
 * Validation result: Not run
 *
 * (add additional file header information here)
 *
 ******************************************************************************/

ASAP2_VERSION  1 31   /* Version 1.31 */

/begin PROJECT ProjectName "Project Comment Goes Here"
  
  /begin HEADER "Header Comments go here"
    
  /end HEADER
  
  
  /begin MODULE ModuleName  "XCP_CAN_ECU"

    /begin A2ML 
      /***********************************************************/
      /*                                                         */
      /* ASAP2 meta language for XCP protocol layer V1.2         */
      /*                                                         */
      /*                                                         */
      /*   Datatypes:                                            */
      /*                                                         */
      /*   A2ML       description                                */
      /*   ----------------------------------------------------- */
      /*   uchar      unsigned 8  Bit                            */
      /*   char       signed 8 Bit                               */
      /*   uint       unsigned integer 16 Bit                    */
      /*   int        signed integer 16 Bit                      */
      /*   ulong      unsigned integer 32 Bit                    */
      /*   long       signed integer 32 Bit                      */
      /*   float      float 32 Bit IEEE 754                      */
      /*                                                         */
      /***********************************************************/

      /*************** start of PROTOCOL_LAYER *******************/ 
        
      struct Protocol_Layer {     /* At MODULE */ 
      
        uint;                                /* XCP protocol layer version */ 
                                            /* e.g. "1.2" = 0x0102            */ 
      
        uint;                                /* T1 [ms] */ 
        uint;                                /* T2 [ms] */ 
        uint;                                /* T3 [ms] */ 
        uint;                                /* T4 [ms] */ 
        uint;                                /* T5 [ms] */ 
        uint;                                /* T6 [ms] */ 
        uint;                                /* T7 [ms] */ 
      
        uchar;                               /* MAX_CTO */ 
        uint;                                /* MAX_DTO default for DAQ and STIM */ 
      
        enum {                               /* BYTE_ORDER */ 
          "BYTE_ORDER_MSB_LAST"  = 0, 
          "BYTE_ORDER_MSB_FIRST" = 1 
        }; 
      
        enum {                               /* ADDRESS_GRANULARITY */ 
          "ADDRESS_GRANULARITY_BYTE"    = 1, 
          "ADDRESS_GRANULARITY_WORD"    = 2, 
          "ADDRESS_GRANULARITY_DWORD"   = 4 
        }; 
      
        taggedstruct {                       /* optional                     */ 
          
          ("OPTIONAL_CMD" enum {             /* XCP-Code of optional command */  
                                            /* supported by the slave       */ 
      
            "GET_COMM_MODE_INFO"       = 0xFB, 
            "GET_ID"                   = 0xFA, 
            "SET_REQUEST"              = 0xF9, 
            "GET_SEED"                 = 0xF8, 
            "UNLOCK"                   = 0xF7, 
            "SET_MTA"                  = 0xF6, 
            "UPLOAD"                   = 0xF5, 
            "SHORT_UPLOAD"             = 0xF4, 
            "BUILD_CHECKSUM"           = 0xF3, 
            "TRANSPORT_LAYER_CMD"      = 0xF2, 
            "USER_CMD"                 = 0xF1, 
            "DOWNLOAD"                 = 0xF0, 
            "DOWNLOAD_NEXT"            = 0xEF, 
            "DOWNLOAD_MAX"             = 0xEE, 
            "SHORT_DOWNLOAD"           = 0xED, 
            "MODIFY_BITS"              = 0xEC, 
            "SET_CAL_PAGE"             = 0xEB, 
            "GET_CAL_PAGE"             = 0xEA, 
            "GET_PAG_PROCESSOR_INFO"   = 0xE9, 
            "GET_SEGMENT_INFO"         = 0xE8, 
            "GET_PAGE_INFO"            = 0xE7, 
            "SET_SEGMENT_MODE"         = 0xE6, 
            "GET_SEGMENT_MODE"         = 0xE5, 
            "COPY_CAL_PAGE"            = 0xE4, 
            "CLEAR_DAQ_LIST"           = 0xE3, 
            "SET_DAQ_PTR"              = 0xE2, 
            "WRITE_DAQ"                = 0xE1, 
            "SET_DAQ_LIST_MODE"        = 0xE0, 
            "GET_DAQ_LIST_MODE"        = 0xDF, 
            "START_STOP_DAQ_LIST"      = 0xDE, 
            "START_STOP_SYNCH"         = 0xDD, 
            "GET_DAQ_CLOCK"            = 0xDC, 
            "READ_DAQ"                 = 0xDB, 
            "GET_DAQ_PROCESSOR_INFO"   = 0xDA, 
            "GET_DAQ_RESOLUTION_INFO"  = 0xD9, 
            "GET_DAQ_LIST_INFO"        = 0xD8, 
            "GET_DAQ_EVENT_INFO"       = 0xD7, 
            "FREE_DAQ"                 = 0xD6, 
            "ALLOC_DAQ"                = 0xD5, 
            "ALLOC_ODT"                = 0xD4, 
            "ALLOC_ODT_ENTRY"          = 0xD3, 
            "PROGRAM_START"            = 0xD2, 
            "PROGRAM_CLEAR"            = 0xD1, 
            "PROGRAM"                  = 0xD0, 
            "PROGRAM_RESET"            = 0xCF, 
            "GET_PGM_PROCESSOR_INFO"   = 0xCE, 
            "GET_SECTOR_INFO"          = 0xCD, 
            "PROGRAM_PREPARE"          = 0xCC, 
            "PROGRAM_FORMAT"           = 0xCB, 
            "PROGRAM_NEXT"             = 0xCA, 
            "PROGRAM_MAX"              = 0xC9, 
            "PROGRAM_VERIFY"           = 0xC8,
            "WRITE_DAQ_MULTIPLE"       = 0xC7
          })*;           
                                              
          "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
            "BLOCK" taggedstruct { 
                "SLAVE";                  /* Slave Block Mode supported  */ 
                "MASTER" struct {         /* Master Block Mode supported */ 
                  uchar;  /* MAX_BS */ 
                  uchar;  /* MIN_ST */ 
                }; 
            }; 
            "INTERLEAVED" uchar;    /* QUEUE_SIZE */  
          }; 
      
          "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];  /* Name of the Seed&Key function */ 
                                                      /* including file extension      */ 
                                                      /* without path                  */ 
          "MAX_DTO_STIM" uint;     /* overrules MAX_DTO see above for STIM use case */                                           
        }; 
      
      };
      /***************** end of PROTOCOL_LAYER *******************/ 

      /*********************** start of DAQ **********************/ 

      struct Daq {                         /* DAQ supported, at MODULE*/ 
        enum {                             /* DAQ_CONFIG_TYPE */ 
          "STATIC"  = 0, 
          "DYNAMIC" = 1 
        }; 
      
        uint;                               /* MAX_DAQ */ 
        uint;                               /* MAX_EVENT_CHANNEL */ 
        uchar;                              /* MIN_DAQ */ 
      
        enum {                            /* OPTIMISATION_TYPE */ 
          "OPTIMISATION_TYPE_DEFAULT"            = 0, 
          "OPTIMISATION_TYPE_ODT_TYPE_16"        = 1, 
          "OPTIMISATION_TYPE_ODT_TYPE_32"        = 2, 
          "OPTIMISATION_TYPE_ODT_TYPE_64"        = 3, 
          "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4, 
          "OPTIMISATION_TYPE_MAX_ENTRY_SIZE"     = 5 
        }; 
      
        enum {                           /* ADDRESS_EXTENSION */ 
          "ADDRESS_EXTENSION_FREE" = 0, 
          "ADDRESS_EXTENSION_ODT"  = 1, 
          "ADDRESS_EXTENSION_DAQ"  = 3 
        }; 
      
      
        enum {                           /* IDENTIFICATION_FIELD */ 
          "IDENTIFICATION_FIELD_TYPE_ABSOLUTE"              = 0, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE"         = 1, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD"         = 2, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3 
        }; 
        
      
        enum {                        /* GRANULARITY_ODT_ENTRY_SIZE_DAQ */ 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE"    = 1, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD"    = 2, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD"   = 4, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG"   = 8 
        }; 
      
        uchar;                              /* MAX_ODT_ENTRY_SIZE_DAQ */ 
      
        enum {                              /* OVERLOAD_INDICATION */ 
          "NO_OVERLOAD_INDICATION"    = 0, 
          "OVERLOAD_INDICATION_PID"   = 1, 
          "OVERLOAD_INDICATION_EVENT" = 2 
        }; 
      
        taggedstruct {                      /* optional */ 
          "DAQ_ALTERNATING_SUPPORTED" uint; /* Display_Event_Channel_Number */
          "PRESCALER_SUPPORTED"; 
          "RESUME_SUPPORTED"; 
          "STORE_DAQ_SUPPORTED";
      
          block "STIM" struct {             /* STIM supported */ 
      
            enum {                      /* GRANULARITY_ODT_ENTRY_SIZE_STIM */ 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE"   = 1, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD"   = 2, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD"  = 4, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG"  = 8 
            }; 
      
            uchar;                          /* MAX_ODT_ENTRY_SIZE_STIM */ 
      
            taggedstruct {                  /* bitwise stimulation */ 
              "BIT_STIM_SUPPORTED"; 
              "MIN_ST_STIM" uchar; /* separation time between DTOs */
              /* time in units of 100 microseconds */
            }; 
          }; 
                
          block "TIMESTAMP_SUPPORTED" struct {  
            uint;                           /* TIMESTAMP_TICKS */ 
            enum { /* TIMESTAMP_SIZE */ 
              "NO_TIME_STAMP" = 0, 
              "SIZE_BYTE"     = 1, 
              "SIZE_WORD"     = 2, 
              "SIZE_DWORD"    = 4 
            }; 
            enum { /* RESOLUTION OF TIMESTAMP */ 
              "UNIT_1NS"   = 0, 
              "UNIT_10NS"  = 1, 
              "UNIT_100NS" = 2, 
              "UNIT_1US"   = 3, 
              "UNIT_10US"  = 4, 
              "UNIT_100US" = 5, 
              "UNIT_1MS"   = 6, 
              "UNIT_10MS"  = 7, 
              "UNIT_100MS" = 8, 
              "UNIT_1S"    = 9, 
              "UNIT_1PS"   = 10,
              "UNIT_10PS"  = 11,
              "UNIT_100PS" = 12
            }; 
            taggedstruct { 
              "TIMESTAMP_FIXED"; 
            }; 
          }; 
      
          "PID_OFF_SUPPORTED";
      
          "MAX_DAQ_TOTAL" uint;
          "MAX_ODT_TOTAL" uint;
          "MAX_ODT_DAQ_TOTAL" uint;
          "MAX_ODT_STIM_TOTAL" uint;
          "MAX_ODT_ENTRIES_TOTAL" uint;
          "MAX_ODT_ENTRIES_DAQ_TOTAL" uint;
          "MAX_ODT_ENTRIES_STIM_TOTAL" uint;

          
          "CPU_LOAD_MAX_TOTAL" float;
          
          block "DAQ_MEMORY_CONSUMPTION" struct {
            ulong; /* "DAQ_MEMORY_LIMIT"		: in Elements[AG] */
            uint;  /* "DAQ_SIZE" 			: Anzahl Elements[AG] pro DAQ-Liste */
            uint;  /* "ODT_SIZE" 			: Anzahl Elements[AG] pro ODT */
            uint;  /* "ODT_ENTRY_SIZE" 		: Anzahl Elements[AG] pro ODT_Entry */
            uint;  /* "ODT_DAQ_BUFFER_ELEMENT_SIZE" : Anzahl Payload-Elements[AG]*Faktor = sizeof(Sendepuffer)[AG] */
            uint;  /* "ODT_STIM_BUFFER_ELEMENT_SIZE": Anzahl Payload-Elements[AG]*Faktor = sizeof(Empfangspuffer)[AG] */
          };
          
          /************************ start of DAQ_LIST *************************/ 
      
          (block "DAQ_LIST" struct {          /* DAQ_LIST                    */ 
                                              /* multiple possible           */ 
            uint;                             /* DAQ_LIST_NUMBER             */ 
            taggedstruct {                            /* optional */ 
              "DAQ_LIST_TYPE" enum {               
                "DAQ"      = 1,               /* DIRECTION = DAQ only     */ 
                "STIM"     = 2,               /* DIRECTION = STIM only    */ 
                "DAQ_STIM" = 3                /* both directions possible */ 
                                              /* but not simultaneously   */ 
              }; 
      
              "MAX_ODT"         uchar;        /* MAX_ODT         */ 
              "MAX_ODT_ENTRIES" uchar;        /* MAX_ODT_ENTRIES */ 
      
              "FIRST_PID" uchar;              /* FIRST_PID for this DAQ_LIST */ 
              "EVENT_FIXED" uint;             /* this DAQ_LIST always        */ 
                                              /* in this event               */ 
              block "PREDEFINED" taggedstruct { /* predefined                */ 
                                                /* not configurable DAQ_LIST */ 
                (block "ODT" struct { 
                        uchar;                   /* ODT number */ 
                        taggedstruct { 
                            ("ODT_ENTRY" struct { 
                                        uchar;   /* ODT_ENTRY number            */ 
                                        ulong;   /* address of element                 */ 
                                        uchar;   /* address extension of element */ 
                                        uchar;   /* size of element [AG]                */ 
                                        uchar;   /* BIT_OFFSET                          */ 
                              })*; 
                        }; /* end of ODT_ENTRY */ 
                  })*; /* end of ODT */ 
              }; /* end of PREDEFINED */ 
            }; 
          
          })*;
          
          /********************* end of DAQ_LIST ***************************/ 
      
          /************************* start of EVENT ************************/ 
        
          (block "EVENT" struct {             /* EVENT               */ 
                                              /* multiple possible   */ 
            char[101];                        /* EVENT_CHANNEL_NAME       */ 
            char[9];                          /* EVENT_CHANNEL_SHORT_NAME */ 
            uint;                             /* EVENT_CHANNEL_NUMBER     */ 
        
            enum { 
              "DAQ"      = 1,                 /* only DAQ_LISTs         */ 
                                              /* with DIRECTION = DAQ   */ 
              "STIM"     = 2,                 /* only DAQ_LISTs         */ 
                                              /* with DIRECTION = STIM  */ 
              "DAQ_STIM" = 3                  /* both kind of DAQ_LISTs */ 
            }; 
        
            uchar;                            /* MAX_DAQ_LIST */ 
            uchar;                            /* EVENT_CHANNEL_TIME_CYCLE */
            uchar;                            /* EVENT_CHANNEL_TIME_UNIT */ 
            uchar;                            /* EVENT_CHANNEL_PRIORITY */ 
              taggedstruct { /* optional */
                
                "COMPLEMENTARY_BYPASS_EVENT_CHANNEL_NUMBER" uint;
                "CONSISTENCY" enum {
      
                    "DAQ" = 0,
                    "EVENT" = 1
                };
              
                block "MIN_CYCLE_TIME" struct { /* Configuration with 0-0 not allowed */
                uchar;                            /* EVENT_CHANNEL_TIME_CYCLE */
                uchar;                            /* EVENT_CHANNEL_TIME_UNIT  */
                };
              
              "CPU_LOAD_MAX" float;
              
              block "CPU_LOAD_CONSUMPTION_DAQ" struct {
                float;  // "DAQ_FACTOR"
                float;  // "ODT_FACTOR"
                float;  // "ODT_ENTRY_FACTOR" 
                taggedstruct { 
                  (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct{// Kopierroutine
                        uint; //"SIZE" 
                        float; // "SIZE_FACTOR" 
                  })*;
                };
              };
              
              block "CPU_LOAD_CONSUMPTION_STIM" struct {
                float;  // "DAQ_FACTOR"
                float;  // "ODT_FACTOR"
                float;  // "ODT_ENTRY_FACTOR" 
                taggedstruct { 
                  (block "ODT_ENTRY_SIZE_FACTOR_TABLE" struct{// Kopierroutine
                        uint; //"SIZE" 
                        float; //"SIZE_FACTOR" 
                  })*;
                };
              };
              
              block "CPU_LOAD_CONSUMPTION_QUEUE" struct {
                  float;  // "ODT_FACTOR" 
                  float;  // "ODT_ELEMENT_LOAD",length in elements[AG]
              };        
            };
          })*;
          
          /******************** end of EVENT *********************/ 
      
        }; /* end of optional at DAQ */ 
      
      }; 
        
      /********************* end of DAQ **************************/  
        

      /***************** start of DAQ_EVENT **********************/ 
      
      taggedunion Daq_Event {         /* at MEASUREMENT */ 
        "FIXED_EVENT_LIST" taggedstruct { 
            ("EVENT" uint)* ; 
        }; 
        "VARIABLE" taggedstruct { 
            block "AVAILABLE_EVENT_LIST" taggedstruct { 
              ("EVENT" uint)*; 
            }; 
            block "DEFAULT_EVENT_LIST" taggedstruct { 
              ("EVENT" uint)*; 
            }; 
        }; 
      }; 

      /******************** end of DAQ_EVENT *********************/ 
        

      /*********************** start of PAG **********************/ 
        
      struct Pag {                  /* PAG supported, at MODULE */ 
        uchar;                      /* MAX_SEGMENTS */ 
        taggedstruct {              /* optional */ 
          "FREEZE_SUPPORTED"; 
        }; 
      
      }; 

      /*********************** end of PAG ************************/ 
            

      /*********************** start of PGM **********************/ 
        
      struct Pgm {                  /* PGM supported, at MODULE */ 
      
        enum { 
          "PGM_MODE_ABSOLUTE"                = 1, 
          "PGM_MODE_FUNCTIONAL"              = 2, 
          "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3 
        }; 
        uchar;                               /* MAX_SECTORS */ 
        uchar;                               /* MAX_CTO_PGM */ 
      
        taggedstruct {                       /* optional                */ 
          (block "SECTOR" struct {           /* SECTOR                  */ 
                                            /* multiple possible       */ 
            char[101];                       /* SECTOR_NAME             */ 
            uchar;                           /* SECTOR_NUMBER           */ 
            ulong;                           /* Address                 */ 
            ulong;                           /* Length                  */ 
            uchar;                           /* CLEAR_SEQUENCE_NUMBER   */ 
            uchar;                           /* PROGRAM_SEQUENCE_NUMBER */ 
            uchar;                           /* PROGRAM_METHOD          */ 
          })*; /* end of SECTOR */ 
                                              
          "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
            "BLOCK" taggedstruct { 
                "SLAVE";                  /* Slave Block Mode supported  */ 
                "MASTER" struct {         /* Master Block Mode supported */ 
                  uchar;  /* MAX_BS_PGM */ 
                  uchar;  /* MIN_ST_PGM */ 
                }; 
            }; 
          "INTERLEAVED" uchar;    /* QUEUE_SIZE_PGM */  
          }; 
        }; 

      }; 

      /*********************** end of PGM ************************/ 

        
      /*********************** start of SEGMENT ******************/ 
        
      struct Segment {               /* at MEMORY_SEGMENT */ 
        uchar;                               /* SEGMENT_NUMBER     */ 
        uchar;                               /* number of pages    */ 
        uchar;                               /* ADDRESS_EXTENSION  */ 
        uchar;                               /* COMPRESSION_METHOD */ 
        uchar;                               /* ENCRYPTION_METHOD  */ 
      
        taggedstruct {                       /* optional           */ 
          block "CHECKSUM" struct { 
            enum {                           /* checksum type      */ 
              "XCP_ADD_11"       =   1, 
              "XCP_ADD_12"       =   2, 
              "XCP_ADD_14"       =   3, 
              "XCP_ADD_22"       =   4, 
              "XCP_ADD_24"       =   5, 
              "XCP_ADD_44"       =   6, 
              "XCP_CRC_16"       =   7, 
              "XCP_CRC_16_CITT"  =   8, 
              "XCP_CRC_32"       =   9, 
              "XCP_USER_DEFINED" = 255 
            }; 
      
            taggedstruct { 
              "MAX_BLOCK_SIZE"              ulong ;    /* maximum block size            */ 
                                                      /* for checksum calculation      */ 
              "EXTERNAL_FUNCTION" char[256];           /* Name of the Checksum function */ 
                                                      /* including file extension      */ 
                                                      /* without path                  */ 
            }; 
          }; 
      
          (block "PAGE" struct {               /* PAGES for this SEGMENT */ 
                                              /* multiple possible      */ 
            uchar;                             /* PAGE_NUMBER            */ 
      
            enum {            /* ECU_ACCESS_TYPE */ 
                "ECU_ACCESS_NOT_ALLOWED"      = 0, 
                "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1, 
                "ECU_ACCESS_WITH_XCP_ONLY"    = 2, 
                "ECU_ACCESS_DONT_CARE"        = 3 
            }; 
      
            enum {       /* XCP_READ_ACCESS_TYPE */ 
                "XCP_READ_ACCESS_NOT_ALLOWED"      = 0, 
                "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1, 
                "XCP_READ_ACCESS_WITH_ECU_ONLY"    = 2, 
                "XCP_READ_ACCESS_DONT_CARE"        = 3 
            }; 
      
            enum {      /* XCP_WRITE_ACCESS_TYPE */ 
                "XCP_WRITE_ACCESS_NOT_ALLOWED"      = 0, 
                "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1, 
                "XCP_WRITE_ACCESS_WITH_ECU_ONLY"    = 2, 
                "XCP_WRITE_ACCESS_DONT_CARE"        = 3 
            }; 
            taggedstruct { 
              "INIT_SEGMENT" uchar; /* references segment that initialises this page */ 
            }; 
      
          })*; /* end of PAGE */                 
      
          (block "ADDRESS_MAPPING" struct {  /* multiple possible   */ 
                              ulong;        /* source address      */ 
                              ulong;        /* destination address */ 
                              ulong;        /* length              */ 
          })*; 
      
          "PGM_VERIFY" ulong; /* verification value for PGM */ 
        }; /* end of optional */ 
      
      }; 

      /************************ end of SEGMENT *******************/ 

        
      /*********************** start of Common Parameters ********/ 
      
      taggedstruct Common_Parameters {  
      
        block "PROTOCOL_LAYER" struct Protocol_Layer; 
      
        block "SEGMENT" struct Segment; 
      
        block "DAQ" struct Daq; 
        block "PAG" struct Pag; 
        block "PGM" struct Pgm; 
      
        block "DAQ_EVENT" taggedunion Daq_Event; 
      
      }; 

      /********************** end of Common Parameters **********/ 


      /***********************************************************/
      /*                                                         */
      /* ASAP2 meta language for XCP on CAN V1.2                 */
      /*                                                         */
      /*                                                         */
      /*   Datatypes:                                            */
      /*                                                         */
      /*   A2ML       description                                */
      /*   ----------------------------------------------------- */
      /*   uchar      unsigned 8  Bit                            */
      /*   char       signed 8 Bit                               */
      /*   uint       unsigned integer 16 Bit                    */
      /*   int        signed integer 16 Bit                      */
      /*   ulong      unsigned integer 32 Bit                    */
      /*   long       signed integer 32 Bit                      */
      /*   float      float 32 Bit IEEE 745                      */
      /*                                                         */
      /***********************************************************/
      /************************ start of CAN *********************/

      struct CAN_Parameters { /* At MODULE */
        uint; /* XCP on CAN version */
              /* e.g. "1.2" = 0x0102 */
        taggedstruct { /* optional */
          "CAN_ID_BROADCAST" ulong; /* Auto detection CAN-ID */
                                    /* master -> slaves */
                                    /* Bit31= 1: extended identifier */
          "CAN_ID_MASTER" ulong;    /* CMD/STIM CAN-ID */
                                    /* master -> slave */
                                    /* Bit31= 1: extended identifier */
          "CAN_ID_MASTER_INCREMENTAL";     /* master uses range of CAN-IDs  */
                                    /* start of range = CAN_ID_MASTER */
                                    /* end of range = CAN_ID_MASTER+MAX_BS(_PGM)-1 */
          "CAN_ID_SLAVE" ulong;     /* RES/ERR/EV/SERV/DAQ CAN-ID */
                                    /* slave -> master */
                                    /* Bit31= 1: extended identifier */
          "BAUDRATE" ulong;         /* BAUDRATE [Hz] */
          "SAMPLE_POINT" uchar;     /* sample point */
                                    /* [% complete bit time] */
          "SAMPLE_RATE" enum {
            "SINGLE" = 1,           /* 1 sample per bit */
            "TRIPLE" = 3            /* 3 samples per bit */
          };
          "BTL_CYCLES" uchar;       /* BTL_CYCLES */
                                    /* [slots per bit time] */
          "SJW" uchar;              /* length synchr. segment */
                                    /* [BTL_CYCLES] */
          "SYNC_EDGE" enum {
            "SINGLE" = 1,           /* on falling edge only */
            "DUAL" = 2              /* on falling and rising edge */
          };
          "MAX_DLC_REQUIRED";       /* master to slave frames */
                                    /* always to have DLC = MAX_DLC = 8 */
                                  
          (block "DAQ_LIST_CAN_ID" struct { /* At IF_DATA DAQ */
            uint;                   /* reference to DAQ_LIST_NUMBER */
            taggedstruct {          /* exclusive tags */
                                    /* either VARIABLE or FIXED */
              "VARIABLE";
              "FIXED" ulong;        /* this DAQ_LIST always */
                                    /* on this CAN_ID */
            };
          })*;
          (block "EVENT_CAN_ID_LIST" struct { /* At IF_DATA DAQ  */
            uint;                   /* reference to EVENT_NUMBER */
            taggedstruct {          /* exclusive tags */
              ("FIXED" ulong)*;        /* this Event always on this ID */
            };
          })*;
            
          "MAX_BUS_LOAD"  ulong;    /* maximum available bus */
                                      /* load in percent */
      
          block "CAN_FD" struct {
            taggedstruct {

              "MAX_DLC" uint; /* 8, 12, 16, 20, 24, 32, 48 or 64 */
              "CAN_FD_DATA_TRANSFER_BAUDRATE" ulong; /* BAUDRATE [Hz] */
    
              "SAMPLE_POINT" uchar;   /* sample point receiver*/
                                          /* [% complete bit time] */
            
              "BTL_CYCLES" uchar;            /* BTL_CYCLES        */
                                        /* [slots per bit time]   */
              "SJW" uchar;              /* length synchr. segment */
                                        /* [BTL_CYCLES]           */
              "SYNC_EDGE" enum {
                          "SINGLE" = 1, /* on falling edge only */
                          "DUAL"   = 2  /* on falling and rising edge*/
                        };
      
              "MAX_DLC_REQUIRED";      /* master to slave frames */
                            /* always to have DLC = MAX_DLC_for CAN-FD */
      
              "SECONDARY_SAMPLE_POINT" uchar;/* sender sample point */
                                        /* [% complete bit time] */
              "TRANSCEIVER_DELAY_COMPENSATION" enum {
                            "OFF" = 0,
                            "ON" = 1
              };
                          
            };
            
          };
          
        };
          
      };

      /************************* end of CAN **********************/

      /************* start of XCP on different Transport Layers *******************/

      struct XCPplus{
        uint;
        taggedstruct Common_Parameters ; /* default parameters */
      
        taggedstruct { /* transport layer specific parameters  */
                      /* overruling of the default parameters */
      
          (block "XCP_ON_CAN" struct {
      
            struct CAN_Parameters ;                   /* specific for CAN      */
            taggedstruct Common_Parameters;           /* overruling of default */
            taggedstruct {
              "TRANSPORT_LAYER_INSTANCE" char[101];
            };   
      
          })*;     
              
        };
      
      };
        
      /************* end of XCP on different Transport Layers ********************/

    /end A2ML


    /begin IF_DATA XCPplus 0x0102
      
      /begin PAG
          0x02
      /end PAG

      /begin PGM
          PGM_MODE_ABSOLUTE
          0x01                   /* MAX_SECTORS */
          0x00                   /* MAX_CTO_PGM */
        /begin SECTOR
          "Sector0"            /* name */
          0x00                 /* SECTOR_NUMBER */
          0x00380000           /* address */
          0x00020000           /* length */
          0x00                 /* Erase number */
          0x00                 /* Program number */
          0x00                 /* Programming method */
        /end SECTOR		
      /end PGM

      /begin XCP_ON_CAN
        0x0102
        CAN_ID_MASTER 0x0201
        CAN_ID_SLAVE 0x0200
        BAUDRATE 0x07A120
        SAMPLE_POINT 0x4B
        SAMPLE_RATE SINGLE
        BTL_CYCLES 0x08
        SJW 0x02
        SYNC_EDGE SINGLE
        MAX_BUS_LOAD  100                                     /* maximum available bus */

        /begin PROTOCOL_LAYER
          0x0102                                                /* XCP protocol layer version */

          5000                                                  /* T1 [ms] */
          5000                                                  /* T2 [ms] */
          0                                                     /* T3 [ms] */
          0                                                     /* T4 [ms] */
          0                                                     /* T5 [ms] */
          0                                                     /* T6 [ms] */
          0                                                     /* T7 [ms] */

          8                                                     /* MAX_CTO */
          8                                                     /* MAX_DTO default for DAQ and STIM */

          BYTE_ORDER_MSB_FIRST                                  /* BYTE_ORDER: MOTOROLA */
          ADDRESS_GRANULARITY_BYTE                              /* ADDRESS_GRANULARITY */

          OPTIONAL_CMD GET_COMM_MODE_INFO
          OPTIONAL_CMD SET_MTA
          OPTIONAL_CMD UPLOAD
          OPTIONAL_CMD SHORT_UPLOAD
          OPTIONAL_CMD BUILD_CHECKSUM
          OPTIONAL_CMD DOWNLOAD
          OPTIONAL_CMD DOWNLOAD_NEXT
          OPTIONAL_CMD DOWNLOAD_MAX
          OPTIONAL_CMD SET_CAL_PAGE
          OPTIONAL_CMD GET_CAL_PAGE
          OPTIONAL_CMD COPY_CAL_PAGE
          OPTIONAL_CMD CLEAR_DAQ_LIST
          OPTIONAL_CMD SET_DAQ_PTR
          OPTIONAL_CMD WRITE_DAQ
          OPTIONAL_CMD SET_DAQ_LIST_MODE
          OPTIONAL_CMD START_STOP_DAQ_LIST
          OPTIONAL_CMD START_STOP_SYNCH
          OPTIONAL_CMD FREE_DAQ
          OPTIONAL_CMD ALLOC_DAQ
          OPTIONAL_CMD ALLOC_ODT
          OPTIONAL_CMD ALLOC_ODT_ENTRY

        /end PROTOCOL_LAYER

        /begin DAQ                                              /* DAQ supported, at MODULE*/
          DYNAMIC                                               /* DAQ_CONFIG_TYPE */
          1024                                                 /* MAX_DAQ */
          3                                                     /* MAX_EVENT_CHANNEL */
          0                                                     /* MIN_DAQ */
          OPTIMISATION_TYPE_DEFAULT                             /* OPTIMISATION_TYPE */
          ADDRESS_EXTENSION_FREE                                /* ADDRESS_EXTENSION */
          IDENTIFICATION_FIELD_TYPE_ABSOLUTE                    /* IDENTIFICATION_FIELD */
          GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE                   /* GRANULARITY_ODT_ENTRY_SIZE_DAQ */
          255                                                   /* MAX_ODT_ENTRY_SIZE_DAQ */
          OVERLOAD_INDICATION_EVENT                             /* OVERLOAD_INDICATION */
          PRESCALER_SUPPORTED
          CPU_LOAD_MAX_TOTAL  0.1

          /begin DAQ_MEMORY_CONSUMPTION
            2048                                                /* DAQ_MEMORY_LIMIT: in Elements[AG] */
            62                                                  /* DAQ_SIZE: number of elements[AG] per DAQ list */
            8                                                   /* ODT_SIZE: number of elements[AG] per ODT */
            7                                                   /* ODT_ENTRY_SIZE: number of elements[AG] per ODT_entry */
            2                                                   /* ODT_DAQ_BUFFER_ELEMENT_SIZE: number of */
                                                                /* payload elements[AG]*factor = sizeof(send buffer)[AG] */
            0                                                   /* ODT_STIM_BUFFER_ELEMENT_SIZE: number of */
                                                                /* payload elements[AG]*factor = sizeof(receive buffer)[AG] */
          /end DAQ_MEMORY_CONSUMPTION

          /begin EVENT
            "Task_10ms"                                          /* EVENT_CHANNEL_NAME       */  
            "Task_10ms"                                          /* EVENT_CHANNEL_SHORT_NAME */ 
            0x00                                                  /* EVENT_CHANNEL_NUMBER     */ 
            DAQ
            0x20                                                  /* MAX_DAQ_LIST */
            0x0a                                                  /* EVENT_CHANNEL_TIME_CYCLE */
            0x06                                                   /* EVENT_CHANNEL_TIME_UNIT */
            0x07                                                   /* EVENT_CHANNEL_PRIORITY */ 
            CONSISTENCY EVENT                                     /* CONSISTENCY */
          /end EVENT
          
          /begin EVENT
            "Task_20ms"
            "Task_20ms"
            0x01
            DAQ
            0x40
            0x14
            0x06
            0x06
            CONSISTENCY EVENT                                     /* CONSISTENCY */
          /end EVENT
          
          /begin EVENT
            "Task_100ms"
            "Task_100ms"
            0x02
            DAQ
            0x01
            0x64
            0x06
            0x05
            CONSISTENCY EVENT                                     /* CONSISTENCY */
          /end EVENT

        /end DAQ

      /end XCP_ON_CAN

    /end IF_DATA


    /begin MOD_PAR "MOD PAR Comment Goes Here"
      
      /begin MEMORY_SEGMENT
        CaliRAM                /* name */
        "Calibration data"    /* long identifier */
        DATA                  /* PrgType */
        FLASH                 /* Memory Type */
        INTERN                /* Attribute */
        0x00380000            /* Address */
        0x00020000            /* Size */
        -1 -1 -1 -1 -1        /* no mirrored segments */
        /begin IF_DATA XCPplus 0x0102
          /begin SEGMENT 
            0x00      /* segment logical number */
            0x02      /* number of pages */
            0x00      /* ADDRESS_EXTENSION */
            0x00      /* COMPRESSION_METHOD */
            0x00      /* ENCRYPTION_METHOD */
			      /begin PAGE
              0x00                          /* PAGE_NUMBER */
              ECU_ACCESS_DONT_CARE          /* ECU_ACCESS_TYPE */
              XCP_READ_ACCESS_DONT_CARE     /* XCP_READ_ACCESS_TYPE */
              XCP_WRITE_ACCESS_NOT_ALLOWED  /* XCP_WRITE_ACCESS_TYPE */
            /end PAGE
            /begin PAGE
              0x01
              ECU_ACCESS_DONT_CARE
              XCP_READ_ACCESS_DONT_CARE
              XCP_WRITE_ACCESS_DONT_CARE
            /end PAGE
          /end SEGMENT
        /end IF_DATA
      /end MEMORY_SEGMENT

      /begin MEMORY_SEGMENT
        CODE_FLASH_major      /* name */
        "CODE major"          /* long identifier */
        CODE                  /* PrgType */
        FLASH                 /* Memory Type */
        INTERN                /* Attribute */
        0x00020000            /* Address */
        0x000E0000            /* Size */
        -1 -1 -1 -1 -1        /* no mirrored segments */
        /begin IF_DATA XCPplus 0x0102
          /begin SEGMENT 
            0x00      /* segment logical number */
            0x02      /* number of pages */
            0x00      /* ADDRESS_EXTENSION */
            0x00      /* COMPRESSION_METHOD */
            0x00      /* ENCRYPTION_METHOD */
			      /begin PAGE
              0x00                          /* PAGE_NUMBER */
              ECU_ACCESS_DONT_CARE          /* ECU_ACCESS_TYPE */
              XCP_READ_ACCESS_WITH_ECU_ONLY /* XCP_READ_ACCESS_TYPE */
              XCP_WRITE_ACCESS_NOT_ALLOWED  /* XCP_WRITE_ACCESS_TYPE */
            /end PAGE
            /begin PAGE
              0x01
              ECU_ACCESS_DONT_CARE
              XCP_READ_ACCESS_DONT_CARE
              XCP_WRITE_ACCESS_WITH_ECU_ONLY
            /end PAGE
          /end SEGMENT
        /end IF_DATA
      /end MEMORY_SEGMENT
	  
      /begin MEMORY_SEGMENT
        CODE_FLASH_minor      /* name */
        "CODE minor "         /* long identifier */
        CODE                  /* PrgType */
        FLASH                 /* Memory Type */
        INTERN                /* Attribute */
        0x0017FF00            /* Address */
        0x00000100            /* Size */
        -1 -1 -1 -1 -1        /* no mirrored segments */
        /begin IF_DATA XCPplus 0x0102
          /begin SEGMENT 
            0x00      /* segment logical number */
            0x02      /* number of pages */
            0x00      /* ADDRESS_EXTENSION */
            0x00      /* COMPRESSION_METHOD */
            0x00      /* ENCRYPTION_METHOD */
			      /begin PAGE
              0x00                          /* PAGE_NUMBER */
              ECU_ACCESS_DONT_CARE          /* ECU_ACCESS_TYPE */
              XCP_READ_ACCESS_WITH_ECU_ONLY /* XCP_READ_ACCESS_TYPE */
              XCP_WRITE_ACCESS_NOT_ALLOWED  /* XCP_WRITE_ACCESS_TYPE */
            /end PAGE
            /begin PAGE
              0x01
              ECU_ACCESS_DONT_CARE
              XCP_READ_ACCESS_DONT_CARE
              XCP_WRITE_ACCESS_WITH_ECU_ONLY
            /end PAGE
          /end SEGMENT
        /end IF_DATA
      /end MEMORY_SEGMENT

    /end MOD_PAR
    
    /begin MOD_COMMON  "Mod Common Comment Here" 
      BYTE_ORDER     MSB_LAST
    /end MOD_COMMON
    
    /begin RECORD_LAYOUT Scalar_BOOLEAN
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_SWORD
      FNC_VALUES 1 SWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_LONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_FLOAT64_IEEE
      FNC_VALUES  1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    
    /begin RECORD_LAYOUT Lookup1D_BOOLEAN
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_BOOLEAN
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_BYTE
      AXIS_PTS_X  1 SBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_UBYTE
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_UWORD
      AXIS_PTS_X  1 UWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_WORD
      FNC_VALUES  1 SWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_WORD
      AXIS_PTS_X  1 SWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_ULONG
      AXIS_PTS_X  1 ULONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_SLONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_LONG
      AXIS_PTS_X  1 SLONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_FLOAT32_IEEE
      AXIS_PTS_X  1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_FLOAT64_IEEE
      FNC_VALUES  1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_FLOAT64_IEEE
      AXIS_PTS_X  1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_BOOLEAN
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_BOOLEAN
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT    
    
    /begin RECORD_LAYOUT Lookup2D_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_UBYTE
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_BYTE
      AXIS_PTS_X  1 SBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_UWORD
      AXIS_PTS_X  1 UWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_WORD
      FNC_VALUES  1 SWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_WORD
      AXIS_PTS_X  1 SWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_ULONG
      AXIS_PTS_X  1 ULONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_LONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_LONG
      AXIS_PTS_X  1 SLONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_FLOAT32_IEEE
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_FLOAT64_IEEE
      FNC_VALUES  1  FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_FLOAT64_IEEE
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    
    
    
    
    /begin GROUP 
      /* Name                   */       ASW
      /* Long identifier        */       "ASW"
      /* Root                    */       ROOT
      /begin SUB_GROUP
        /*Root_Overview*/
      /end SUB_GROUP
    /end GROUP
    
 
    
    
  /end MODULE
  
  
/end PROJECT
/* (add any file trailer comments here) */
/* EOF ASW.a2l */
